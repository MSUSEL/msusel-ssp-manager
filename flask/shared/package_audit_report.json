{
  "report_metadata": {
    "generated_at": "2025-09-13T03:30:31.766378",
    "report_type": "package_vulnerability_audit",
    "total_packages": 4
  },
  "summary": {
    "packages_with_vulnerabilities": 4,
    "total_vulnerabilities": 10,
    "packages_clean": 0,
    "packages_failed_audit": 0
  },
  "packages": [
    {
      "name": "future",
      "installed_version": "unknown",
      "requested_version": "unknown",
      "installation_status": "unknown",
      "audit_status": "success",
      "vulnerability_count": 1,
      "vulnerabilities": [
        {
          "id": "CVE-2025-50817",
          "description": "A vulnerability in Python-Future modules 0.14.0 and above allows for arbitrary code execution via the unintended import of a file named test.py. When the module is loaded, it automatically imports test.py, if present in the same directory or in the sys.path. This behavior can be exploited by an attacker who has the ability to write files to the server, allowing the execution of arbitrary code.",
          "fix_versions": [],
          "severity": "unknown"
        }
      ]
    },
    {
      "name": "pip",
      "installed_version": "unknown",
      "requested_version": "unknown",
      "installation_status": "unknown",
      "audit_status": "success",
      "vulnerability_count": 1,
      "vulnerabilities": [
        {
          "id": "CVE-2023-5752",
          "description": "When installing a package from a Mercurial VCS URL  (ie \"pip install  hg+...\") with pip prior to v23.3, the specified Mercurial revision could  be used to inject arbitrary configuration options to the \"hg clone\"  call (ie \"--config\"). Controlling the Mercurial configuration can modify  how and which repository is installed. This vulnerability does not  affect users who aren't installing from Mercurial. ",
          "fix_versions": [
            "23.3"
          ],
          "severity": "unknown"
        }
      ]
    },
    {
      "name": "setuptools",
      "installed_version": "unknown",
      "requested_version": "unknown",
      "installation_status": "unknown",
      "audit_status": "success",
      "vulnerability_count": 2,
      "vulnerabilities": [
        {
          "id": "CVE-2022-40897",
          "description": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
          "fix_versions": [
            "65.5.1"
          ],
          "severity": "unknown"
        },
        {
          "id": "CVE-2025-47273",
          "description": "setuptools is a package that allows users to download, build, install, upgrade, and uninstall Python packages. A path traversal vulnerability in `PackageIndex` is present in setuptools prior to version 78.1.1. An attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to remote code execution depending on the context. Version 78.1.1 fixes the issue.",
          "fix_versions": [
            "78.1.1"
          ],
          "severity": "unknown"
        }
      ]
    },
    {
      "name": "urllib3",
      "installed_version": "unknown",
      "requested_version": "unknown",
      "installation_status": "unknown",
      "audit_status": "success",
      "vulnerability_count": 6,
      "vulnerabilities": [
        {
          "id": "CVE-2021-33503",
          "description": "An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.",
          "fix_versions": [
            "1.26.5"
          ],
          "severity": "unknown"
        },
        {
          "id": "CVE-2020-26137",
          "description": "urllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of putrequest(). NOTE: this is similar to CVE-2020-26116.",
          "fix_versions": [
            "1.25.9"
          ],
          "severity": "unknown"
        },
        {
          "id": "CVE-2023-43804",
          "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5.",
          "fix_versions": [
            "1.26.17",
            "2.0.6"
          ],
          "severity": "unknown"
        },
        {
          "id": "CVE-2023-45803",
          "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body. ",
          "fix_versions": [
            "1.26.18",
            "2.0.7"
          ],
          "severity": "unknown"
        },
        {
          "id": "CVE-2024-37891",
          "description": "When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.  However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.  Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.  Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.  ## Affected usages  We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:  * Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. * Not disabling HTTP redirects. * Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.  ## Remediation  * Using the `Proxy-Authorization` header with urllib3's `ProxyManager`. * Disabling HTTP redirects using `redirects=False` when sending requests. * Not using the `Proxy-Authorization` header.",
          "fix_versions": [
            "1.26.19",
            "2.2.2"
          ],
          "severity": "unknown"
        },
        {
          "id": "CVE-2025-50181",
          "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level.",
          "fix_versions": [
            "2.5.0"
          ],
          "severity": "unknown"
        }
      ]
    }
  ]
}