name: Deploy to AKS

on:
  push:
    branches: 
      - minikube
  workflow_dispatch:
permissions:
  contents: read
  packages: write
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          echo "GITHUB_USER_LOWERCASE=$(echo ${{ github.actor }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build OSCAL Processing image
        run: |
          docker build \
            -t ghcr.io/${{ env.GITHUB_USER_LOWERCASE }}/oscal-processing:latest \
            ./oscal-processing
          docker push ghcr.io/${{ env.GITHUB_USER_LOWERCASE }}/oscal-processing:latest

      - name: Build Flask image
        run: |
          docker build \
            --build-arg HOST_VOLUME_PATH="/flask" \
            -t ghcr.io/${{ env.GITHUB_USER_LOWERCASE }}/msu-ssp-manager-flask:latest \
            -f flask/Dockerfile ./flask
          docker push ghcr.io/${{ env.GITHUB_USER_LOWERCASE }}/msu-ssp-manager-flask:latest

      - name: Build React image
        run: |
          docker build \
            -t ghcr.io/${{ env.GITHUB_USER_LOWERCASE }}/msu-ssp-manager-react-app:latest \
            -f flask/react-app/Dockerfile ./flask/react-app
          docker push ghcr.io/${{ env.GITHUB_USER_LOWERCASE }}/msu-ssp-manager-react-app:latest
      - name: Set up Kubectl
        run: |
          # First create the directory
          mkdir -p $HOME/.kube
          # Then decode and write the config file
          echo "${{ secrets.KUBECONFIG_SECRET }}" | base64 -d > $HOME/.kube/config
          # Set permissions
          chmod 600 $HOME/.kube/config
          # Set environment variable
          export KUBECONFIG=$HOME/.kube/config
          # Verify the connection
          kubectl cluster-info
      - name: Configure container registry authentication
        run: |
          kubectl delete secret regcred --ignore-not-found
          kubectl create secret docker-registry regcred \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GHCR_PAT }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com
      - name: Create required secrets
        run: |
          # Create ArangoDB password secret
          kubectl create secret generic arango-root-password \
            --from-literal=password=${{ secrets.ARANGO_ROOT_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Verify secret creation
          kubectl get secret arango-root-password
      - name: Deploy to AKS
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          # Delete old deployments first
          kubectl delete deployment flask --ignore-not-found=true
          kubectl delete deployment react-app --ignore-not-found=true
          
          # Wait for pods to be deleted
          kubectl wait --for=delete pod -l io.kompose.service=flask --timeout=60s || true
          kubectl wait --for=delete pod -l io.kompose.service=react-app --timeout=60s || true
          
          # Verify secrets and configs
          echo "Checking secrets before deployment..."
          kubectl get secrets
          kubectl get secret regcred -o yaml | grep -v "dockerconfigjson:"
          
          # Deploy applications
          kubectl apply --validate=false -f manifests/flask-deployment.yaml
          kubectl apply --validate=false -f manifests/flask-service.yaml
          
          # Enhanced debugging
          echo "Waiting 30 seconds for pod creation..."
          sleep 30
          
          echo "Detailed pod information:"
          kubectl get pods -l io.kompose.service=flask -o wide
          
          echo "Full pod description:"
          kubectl describe pod -l io.kompose.service=flask
          
          echo "Node status:"
          kubectl describe nodes
          
          echo "Events from the last 5 minutes:"
          kubectl get events --sort-by='.lastTimestamp' | tail -n 20
          
          # Wait for deployment
          kubectl rollout status deployment/flask --timeout=300s

