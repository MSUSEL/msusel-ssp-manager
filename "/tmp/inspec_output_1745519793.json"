{"platform":{"name":"ubuntu","release":"24.04","target_id":"d2111083-60e2-528a-8a75-14e2e2460ed3"},"profiles":[{"name":"tests from .home.ernesto.Documents.msusel-ssp-manager.inspec.input_validation_test.rb","sha256":"c6547230a7c89abda4d2b4a533f07660712f689322123f87cc68ef3695c7a5c3","title":"tests from /home/ernesto/Documents/msusel-ssp-manager/inspec/input_validation_test.rb","supports":[],"attributes":[],"groups":[{"id":"input_validation_test.rb","controls":["input-validation-policy"]}],"controls":[{"id":"input-validation-policy","title":"Validate Input Validation Controls","desc":"Ensure that input validation mechanisms are properly enforced (SI-3, SI-7)","descriptions":[{"label":"default","data":"Ensure that input validation mechanisms are properly enforced (SI-3, SI-7)"}],"impact":1.0,"refs":[],"tags":{},"code":"control 'input-validation-policy' do\n  impact 1.0\n  title 'Validate Input Validation Controls'\n  desc 'Ensure that input validation mechanisms are properly enforced (SI-3, SI-7)'\n\n  app_url = 'http://localhost:8000'\n  log_file_path = './logs/opa_interactions.log'\n\n  # Test case 1: Valid input\n  describe 'Valid input submission' do\n    # Submit valid input\n    response = http(\"#{app_url}/submit_data\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      field_type: 'email',\n                      data: 'test@example.com'\n                    }.to_json)\n\n    it 'should accept valid input' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['valid']).to eq(true)\n    end\n  end\n\n  # Test case 2: SQL injection attempt\n  describe 'SQL injection attempt' do\n    # Submit input with SQL injection\n    response = http(\"#{app_url}/submit_data\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      field_type: 'text',\n                      data: \"' OR 1=1; --\"\n                    }.to_json)\n\n    it 'should reject SQL injection attempt' do\n      expect(response.status).to eq(400)\n      expect(JSON.parse(response.body)['valid']).to eq(false)\n      expect(JSON.parse(response.body)['reason']).to include('SQL injection')\n    end\n  end\n\n  # Test case 3: XSS attempt\n  describe 'XSS attempt' do\n    # Submit input with XSS\n    response = http(\"#{app_url}/submit_data\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      field_type: 'text',\n                      data: \"<script>alert('XSS')</script>\"\n                    }.to_json)\n\n    it 'should reject XSS attempt' do\n      expect(response.status).to eq(400)\n      expect(JSON.parse(response.body)['valid']).to eq(false)\n      expect(JSON.parse(response.body)['reason']).to include('XSS')\n    end\n  end\n\n  # Test case 4: Input length validation\n  describe 'Input length validation' do\n    # Submit input that exceeds maximum length\n    long_input = 'a' * 1000\n    response = http(\"#{app_url}/submit_data\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      field_type: 'username',\n                      data: long_input\n                    }.to_json)\n\n    it 'should reject input exceeding maximum length' do\n      expect(response.status).to eq(400)\n      expect(JSON.parse(response.body)['valid']).to eq(false)\n      expect(JSON.parse(response.body)['reason']).to include('length')\n    end\n  end\n\n  # Test case 5: Email format validation\n  describe 'Email format validation' do\n    # Submit invalid email format\n    response = http(\"#{app_url}/submit_data\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      field_type: 'email',\n                      data: 'not-an-email'\n                    }.to_json)\n\n    it 'should reject invalid email format' do\n      expect(response.status).to eq(400)\n      expect(JSON.parse(response.body)['valid']).to eq(false)\n      expect(JSON.parse(response.body)['reason']).to include('format')\n    end\n  end\n\n  # Test case 6: Date format validation\n  describe 'Date format validation' do\n    # Submit invalid date format\n    response = http(\"#{app_url}/submit_data\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      field_type: 'date',\n                      data: '01/01/2023'  # Not in YYYY-MM-DD format\n                    }.to_json)\n\n    it 'should reject invalid date format' do\n      expect(response.status).to eq(400)\n      expect(JSON.parse(response.body)['valid']).to eq(false)\n      expect(JSON.parse(response.body)['reason']).to include('format')\n    end\n  end\n\n  # Test case 7: File integrity validation\n  describe 'File integrity validation' do\n    # Submit file with valid hash\n    response = http(\"#{app_url}/validate_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      file: {\n                        name: 'config.json',\n                        hash: 'a1b2c3d4e5f6g7h8i9j0'\n                      }\n                    }.to_json)\n\n    it 'should validate file with correct hash' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['valid']).to eq(true)\n    end\n  end\n\n  # Test case 8: File integrity validation with invalid hash\n  describe 'File integrity validation with invalid hash' do\n    # Submit file with invalid hash\n    response = http(\"#{app_url}/validate_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: { \n                      file: {\n                        name: 'config.json',\n                        hash: 'invalid_hash'\n                      }\n                    }.to_json)\n\n    it 'should reject file with incorrect hash' do\n      expect(response.status).to eq(400)\n      expect(JSON.parse(response.body)['valid']).to eq(false)\n      expect(JSON.parse(response.body)['reason']).to include('integrity')\n    end\n  end\n\n  # Validate OPA logs for input validation decisions\n  describe file(log_file_path) do\n    its('content') { should include 'input_validation' }\n    its('content') { should include 'sql_injection_detected' }\n    its('content') { should include 'xss_detected' }\n    its('content') { should include 'input_length_valid' }\n    its('content') { should include 'input_format_valid' }\n    its('content') { should include 'file_integrity_valid' }\n  end\nend\n","source_location":{"line":1,"ref":"/home/ernesto/Documents/msusel-ssp-manager/inspec/input_validation_test.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Valid input submission should accept valid input","run_time":0.006647842,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Valid input submission"},{"status":"passed","code_desc":"SQL injection attempt should reject SQL injection attempt","run_time":0.006876928,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"SQL injection attempt"},{"status":"passed","code_desc":"XSS attempt should reject XSS attempt","run_time":0.004030756,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"XSS attempt"},{"status":"passed","code_desc":"Input length validation should reject input exceeding maximum length","run_time":0.002969972,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Input length validation"},{"status":"passed","code_desc":"Email format validation should reject invalid email format","run_time":0.003331715,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Email format validation"},{"status":"passed","code_desc":"Date format validation should reject invalid date format","run_time":0.003620031,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Date format validation"},{"status":"passed","code_desc":"File integrity validation should validate file with correct hash","run_time":0.002616088,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"File integrity validation"},{"status":"passed","code_desc":"File integrity validation with invalid hash should reject file with incorrect hash","run_time":0.002774331,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"Object","resource_params":"[]","resource_id":"File integrity validation with invalid hash"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"input_validation\"","run_time":0.000348288,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"sql_injection_detected\"","run_time":0.000101911,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"xss_detected\"","run_time":0.000127357,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"input_length_valid\"","run_time":9.3144e-05,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"input_format_valid\"","run_time":0.000331197,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"file_integrity_valid\"","run_time":0.000100788,"start_time":"2025-04-24T12:36:39-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"}]}],"status":"loaded","status_message":""}],"statistics":{"duration":0.040827718},"version":"6.8.11"}