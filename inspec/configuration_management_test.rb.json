{"platform":{"name":"ubuntu","release":"24.04","target_id":"d2111083-60e2-528a-8a75-14e2e2460ed3"},"profiles":[{"name":"tests from inspec..configuration_management_test.rb","sha256":"04a5167c362a620aabb9d48611618f86b3f501a86c17033bfb0ec5bfba862662","title":"tests from inspec//configuration_management_test.rb","supports":[],"attributes":[],"groups":[{"id":"configuration_management_test.rb","controls":["configuration-management-policy"]}],"controls":[{"id":"configuration-management-policy","title":"Validate Configuration Management Controls","desc":"Ensure that configuration management controls are properly enforced (CM-2, CM-5, CM-8)","descriptions":[{"label":"default","data":"Ensure that configuration management controls are properly enforced (CM-2, CM-5, CM-8)"}],"impact":1.0,"refs":[],"tags":{},"code":"control 'configuration-management-policy' do\n  impact 1.0\n  title 'Validate Configuration Management Controls'\n  desc 'Ensure that configuration management controls are properly enforced (CM-2, CM-5, CM-8)'\n\n  app_url = 'http://localhost:8000'\n  log_file_path = './logs/opa_interactions.log'\n\n  # Test case 1: Authorized configuration change\n  describe 'Authorized configuration change' do\n    # First login as admin to get token\n    login_response = http(\"#{app_url}/login\",\n                          method: 'POST',\n                          headers: { 'Content-Type' => 'application/json' },\n                          data: { \n                            username: 'admin_user', \n                            password: 'AdminSecurePass456',\n                            mfa_code: '654321'\n                          }.to_json)\n    \n    token = JSON.parse(login_response.body)['access_token']\n    \n    # Make an authorized configuration change\n    change_response = http(\"#{app_url}/config_change\",\n                           method: 'POST',\n                           headers: { \n                             'Authorization' => \"Bearer #{token}\",\n                             'Content-Type' => 'application/json'\n                           },\n                           data: {\n                             change: {\n                               ticket_id: 'CHG-12345',\n                               approved_by: 'approver_user',\n                               component: 'web-server-01',\n                               setting: 'max_connections',\n                               value: 1200\n                             }\n                           }.to_json)\n\n    it 'should allow authorized configuration change' do\n      expect(change_response.status).to eq(200)\n      expect(JSON.parse(change_response.body)['allowed']).to eq(true)\n    end\n  end\n\n  # Test case 2: Unauthorized configuration change (non-admin user)\n  describe 'Unauthorized configuration change (non-admin user)' do\n    # First login as regular user to get token\n    login_response = http(\"#{app_url}/login\",\n                          method: 'POST',\n                          headers: { 'Content-Type' => 'application/json' },\n                          data: { \n                            username: 'regular_user', \n                            password: 'SecurePassword123'\n                          }.to_json)\n    \n    token = JSON.parse(login_response.body)['access_token']\n    \n    # Attempt unauthorized configuration change\n    change_response = http(\"#{app_url}/config_change\",\n                           method: 'POST',\n                           headers: { \n                             'Authorization' => \"Bearer #{token}\",\n                             'Content-Type' => 'application/json'\n                           },\n                           data: {\n                             change: {\n                               ticket_id: 'CHG-12345',\n                               approved_by: 'approver_user',\n                               component: 'web-server-01',\n                               setting: 'max_connections',\n                               value: 1200\n                             }\n                           }.to_json)\n\n    it 'should deny configuration change by non-admin user' do\n      expect(change_response.status).to eq(403)\n      expect(JSON.parse(change_response.body)['allowed']).to eq(false)\n      expect(JSON.parse(change_response.body)['reason']).to include('not authorized')\n    end\n  end\n\n  # Test case 3: Unauthorized configuration change (outside allowed hours)\n  describe 'Unauthorized configuration change (outside allowed hours)' do\n    # First login as admin to get token\n    login_response = http(\"#{app_url}/login\",\n                          method: 'POST',\n                          headers: { 'Content-Type' => 'application/json' },\n                          data: { \n                            username: 'admin_user', \n                            password: 'AdminSecurePass456',\n                            mfa_code: '654321'\n                          }.to_json)\n    \n    token = JSON.parse(login_response.body)['access_token']\n    \n    # Attempt configuration change outside allowed hours\n    change_response = http(\"#{app_url}/config_change?simulate_time=03:00:00\",\n                           method: 'POST',\n                           headers: { \n                             'Authorization' => \"Bearer #{token}\",\n                             'Content-Type' => 'application/json'\n                           },\n                           data: {\n                             change: {\n                               ticket_id: 'CHG-12345',\n                               approved_by: 'approver_user',\n                               component: 'web-server-01',\n                               setting: 'max_connections',\n                               value: 1200\n                             }\n                           }.to_json)\n\n    it 'should deny configuration change outside allowed hours' do\n      expect(change_response.status).to eq(403)\n      expect(JSON.parse(change_response.body)['allowed']).to eq(false)\n      expect(JSON.parse(change_response.body)['reason']).to include('outside allowed hours')\n    end\n  end\n\n  # Test case 4: Configuration compliance check\n  describe 'Configuration compliance check' do\n    # Check configuration compliance\n    compliance_response = http(\"#{app_url}/check_compliance\",\n                               method: 'POST',\n                               headers: { 'Content-Type' => 'application/json' },\n                               data: {\n                                 component: {\n                                   id: 'web-server-01',\n                                   type: 'web_server',\n                                   settings: {\n                                     max_connections: 1000,\n                                     timeout: 60,\n                                     ssl_enabled: true,\n                                     min_tls_version: 'TLS 1.2',\n                                     default_charset: 'UTF-8'\n                                   }\n                                 }\n                               }.to_json)\n\n    it 'should validate compliant configuration' do\n      expect(compliance_response.status).to eq(200)\n      expect(JSON.parse(compliance_response.body)['compliant']).to eq(true)\n    end\n  end\n\n  # Test case 5: Configuration non-compliance check\n  describe 'Configuration non-compliance check' do\n    # Check configuration with non-compliant settings\n    compliance_response = http(\"#{app_url}/check_compliance\",\n                               method: 'POST',\n                               headers: { 'Content-Type' => 'application/json' },\n                               data: {\n                                 component: {\n                                   id: 'web-server-01',\n                                   type: 'web_server',\n                                   settings: {\n                                     max_connections: 1000,\n                                     timeout: 60,\n                                     ssl_enabled: false,  # Non-compliant: should be true\n                                     min_tls_version: 'TLS 1.1',  # Non-compliant: should be TLS 1.2\n                                     default_charset: 'UTF-8'\n                                   }\n                                 }\n                               }.to_json)\n\n    it 'should identify non-compliant configuration' do\n      expect(compliance_response.status).to eq(200)\n      expect(JSON.parse(compliance_response.body)['compliant']).to eq(false)\n      expect(JSON.parse(compliance_response.body)['non_compliant_settings']).to include('ssl_enabled')\n      expect(JSON.parse(compliance_response.body)['non_compliant_settings']).to include('min_tls_version')\n    end\n  end\n\n  # Test case 6: Component inventory check\n  describe 'Component inventory check' do\n    # Check if component is in inventory\n    inventory_response = http(\"#{app_url}/check_inventory\",\n                              method: 'POST',\n                              headers: { 'Content-Type' => 'application/json' },\n                              data: {\n                                component: {\n                                  id: 'web-server-01'\n                                }\n                              }.to_json)\n\n    it 'should validate component in inventory' do\n      expect(inventory_response.status).to eq(200)\n      expect(JSON.parse(inventory_response.body)['in_inventory']).to eq(true)\n    end\n  end\n\n  # Test case 7: Component not in inventory\n  describe 'Component not in inventory' do\n    # Check if unknown component is in inventory\n    inventory_response = http(\"#{app_url}/check_inventory\",\n                              method: 'POST',\n                              headers: { 'Content-Type' => 'application/json' },\n                              data: {\n                                component: {\n                                  id: 'unknown-server-99'\n                                }\n                              }.to_json)\n\n    it 'should identify component not in inventory' do\n      expect(inventory_response.status).to eq(200)\n      expect(JSON.parse(inventory_response.body)['in_inventory']).to eq(false)\n    end\n  end\n\n  # Test case 8: Dependency check\n  describe 'Dependency check' do\n    # Check if dependencies are approved\n    dependency_response = http(\"#{app_url}/check_dependencies\",\n                               method: 'POST',\n                               headers: { 'Content-Type' => 'application/json' },\n                               data: {\n                                 component: {\n                                   id: 'web-server-01',\n                                   dependencies: [\n                                     'express@4.18.2',\n                                     'react@18.2.0',\n                                     'node@18.12.1'\n                                   ]\n                                 }\n                               }.to_json)\n\n    it 'should validate approved dependencies' do\n      expect(dependency_response.status).to eq(200)\n      expect(JSON.parse(dependency_response.body)['approved']).to eq(true)\n    end\n  end\n\n  # Test case 9: Unapproved dependency check\n  describe 'Unapproved dependency check' do\n    # Check with unapproved dependencies\n    dependency_response = http(\"#{app_url}/check_dependencies\",\n                               method: 'POST',\n                               headers: { 'Content-Type' => 'application/json' },\n                               data: {\n                                 component: {\n                                   id: 'web-server-01',\n                                   dependencies: [\n                                     'express@4.18.2',\n                                     'react@18.2.0',\n                                     'vulnerable-package@1.0.0'  # Unapproved dependency\n                                   ]\n                                 }\n                               }.to_json)\n\n    it 'should identify unapproved dependencies' do\n      expect(dependency_response.status).to eq(200)\n      expect(JSON.parse(dependency_response.body)['approved']).to eq(false)\n      expect(JSON.parse(dependency_response.body)['unapproved_dependencies']).to include('vulnerable-package@1.0.0')\n    end\n  end\n\n  # Validate OPA logs for configuration management decisions\n  describe file(log_file_path) do\n    its('content') { should include 'configuration_management' }\n    its('content') { should include 'config_change_authorized' }\n    its('content') { should include 'config_compliant_with_baseline' }\n    its('content') { should include 'component_in_inventory' }\n    its('content') { should include 'dependencies_approved' }\n  end\nend\n","source_location":{"line":1,"ref":"inspec//configuration_management_test.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Authorized configuration change should allow authorized configuration change","run_time":0.005864828,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Authorized configuration change"},{"status":"passed","code_desc":"Unauthorized configuration change (non-admin user) should deny configuration change by non-admin user","run_time":0.006328337,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Unauthorized configuration change (non-admin user)"},{"status":"failed","code_desc":"Unauthorized configuration change (outside allowed hours) should deny configuration change outside allowed hours","run_time":0.015906358,"start_time":"2025-04-24T11:15:30-06:00","message":"expected \"Configuration changes are only allowed during business hours (9am-5pm)\" to include \"outside allowed hours\"","resource_class":"Object","resource_params":"[]","resource_id":"Unauthorized configuration change (outside allowed hours)"},{"status":"passed","code_desc":"Configuration compliance check should validate compliant configuration","run_time":0.004300997,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Configuration compliance check"},{"status":"passed","code_desc":"Configuration non-compliance check should identify non-compliant configuration","run_time":0.002709055,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Configuration non-compliance check"},{"status":"passed","code_desc":"Component inventory check should validate component in inventory","run_time":0.004133314,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Component inventory check"},{"status":"passed","code_desc":"Component not in inventory should identify component not in inventory","run_time":0.003802248,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Component not in inventory"},{"status":"passed","code_desc":"Dependency check should validate approved dependencies","run_time":0.002630047,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Dependency check"},{"status":"passed","code_desc":"Unapproved dependency check should identify unapproved dependencies","run_time":0.002280092,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Unapproved dependency check"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"configuration_management\"","run_time":0.000676808,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"config_change_authorized\"","run_time":0.000114795,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"config_compliant_with_baseline\"","run_time":8.9348e-05,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"component_in_inventory\"","run_time":8.3396e-05,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"passed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"dependencies_approved\"","run_time":0.000223819,"start_time":"2025-04-24T11:15:30-06:00","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"}]}],"status":"loaded","status_message":""}],"statistics":{"duration":0.055528661},"version":"6.8.11"}