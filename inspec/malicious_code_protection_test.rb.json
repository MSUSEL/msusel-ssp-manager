{"platform":{"name":"ubuntu","release":"24.04","target_id":"d2111083-60e2-528a-8a75-14e2e2460ed3"},"profiles":[{"name":"tests from controls.malicious_code_protection_test.rb","sha256":"41d9e96cb70e75d63be5502937f78074b3f1b9a1f9dbdb188fc6945ad3513624","title":"tests from controls/malicious_code_protection_test.rb","supports":[],"attributes":[],"groups":[{"id":"malicious_code_protection_test.rb","controls":["malicious-code-protection-policy"]}],"controls":[{"id":"malicious-code-protection-policy","title":"Validate Malicious Code Protection","desc":"Ensure that malicious code protection mechanisms are properly implemented (SI-3)","descriptions":[{"label":"default","data":"Ensure that malicious code protection mechanisms are properly implemented (SI-3)"}],"impact":1.0,"refs":[],"tags":{},"code":"control 'malicious-code-protection-policy' do\n  impact 1.0\n  title 'Validate Malicious Code Protection'\n  desc 'Ensure that malicious code protection mechanisms are properly implemented (SI-3)'\n\n  app_url = 'http://localhost:8000'\n  log_file_path = '../logs/opa_interactions.log'\n\n  # Test case 1: Safe file upload\n  describe 'Safe file upload' do\n    # Try to upload a safe file\n    response = http(\"#{app_url}/scan_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: {\n                      file: {\n                        name: 'document.txt',\n                        content: 'This is a safe document with normal content.',\n                        size: 100,\n                        type: 'document'\n                      }\n                    }.to_json)\n\n    it 'should allow safe file' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['allowed']).to eq(true)\n      expect(JSON.parse(response.body)['malicious']).to eq(false)\n    end\n  end\n\n  # Test case 2: Malicious file extension\n  describe 'Malicious file extension' do\n    # Try to upload a file with malicious extension\n    response = http(\"#{app_url}/scan_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: {\n                      file: {\n                        name: 'suspicious.exe',\n                        content: 'Binary content',\n                        size: 500,\n                        type: 'executable',\n                        approved: false\n                      }\n                    }.to_json)\n\n    it 'should detect malicious file extension' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['allowed']).to eq(false)\n      expect(JSON.parse(response.body)['malicious']).to eq(true)\n      expect(JSON.parse(response.body)['reason']).to include('malicious extension')\n    end\n  end\n\n  # Test case 3: Malicious content pattern\n  describe 'Malicious content pattern' do\n    # Try to upload a file with malicious content\n    response = http(\"#{app_url}/scan_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: {\n                      file: {\n                        name: 'script.txt',\n                        content: 'This file contains <script>alert(\"malicious\")</script> code',\n                        size: 200,\n                        type: 'document'\n                      }\n                    }.to_json)\n\n    it 'should detect malicious content pattern' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['malicious']).to eq(true)\n      expect(JSON.parse(response.body)['reason']).to include('malicious pattern')\n    end\n  end\n\n  # Test case 4: Suspicious file size\n  describe 'Suspicious file size' do\n    # Try to upload a file with suspicious size\n    response = http(\"#{app_url}/scan_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: {\n                      file: {\n                        name: 'large_document.pdf',\n                        content: 'Large content...',\n                        size: 15000000, # 15MB\n                        type: 'document'\n                      }\n                    }.to_json)\n\n    it 'should detect suspicious file size' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['malicious']).to eq(true)\n      expect(JSON.parse(response.body)['reason']).to include('suspicious size')\n    end\n  end\n\n  # Test case 5: Approved executable\n  describe 'Approved executable' do\n    # Try to upload an approved executable\n    response = http(\"#{app_url}/scan_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: {\n                      file: {\n                        name: 'approved.exe',\n                        content: 'Binary content',\n                        size: 500,\n                        type: 'executable',\n                        approved: true\n                      }\n                    }.to_json)\n\n    it 'should allow approved executable' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['allowed']).to eq(true)\n      expect(JSON.parse(response.body)['malicious']).to eq(false)\n    end\n  end\n\n  # Test case 6: Override for quarantine\n  describe 'Override for quarantine' do\n    # Try to upload a malicious file with override\n    response = http(\"#{app_url}/scan_file\",\n                    method: 'POST',\n                    headers: { 'Content-Type' => 'application/json' },\n                    data: {\n                      file: {\n                        name: 'suspicious.exe',\n                        content: 'Binary content',\n                        size: 500,\n                        type: 'executable',\n                        approved: false,\n                        override: true\n                      }\n                    }.to_json)\n\n    it 'should quarantine file with override' do\n      expect(response.status).to eq(200)\n      expect(JSON.parse(response.body)['allowed']).to eq(false)\n      expect(JSON.parse(response.body)['malicious']).to eq(true)\n      expect(JSON.parse(response.body)['action']).to eq('quarantine')\n    end\n  end\n\n  # Validate OPA logs for malicious code protection decisions\n  describe file(log_file_path) do\n    its('content') { should include 'malicious_code_protection' }\n    its('content') { should include 'malicious_code_detected' }\n  end\nend\n","source_location":{"line":1,"ref":"controls/malicious_code_protection_test.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Safe file upload should allow safe file","run_time":0.010369206,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Safe file upload"},{"status":"passed","code_desc":"Malicious file extension should detect malicious file extension","run_time":0.013871972,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Malicious file extension"},{"status":"passed","code_desc":"Malicious content pattern should detect malicious content pattern","run_time":0.00543883,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Malicious content pattern"},{"status":"passed","code_desc":"Suspicious file size should detect suspicious file size","run_time":0.007034363,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Suspicious file size"},{"status":"passed","code_desc":"Approved executable should allow approved executable","run_time":0.004005777,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Approved executable"},{"status":"passed","code_desc":"Override for quarantine should quarantine file with override","run_time":0.003589166,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Override for quarantine"},{"status":"passed","code_desc":"File ../logs/opa_interactions.log content is expected to include \"malicious_code_protection\"","run_time":0.001028252,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"file","resource_params":"[\"../logs/opa_interactions.log\"]","resource_id":"../logs/opa_interactions.log"},{"status":"passed","code_desc":"File ../logs/opa_interactions.log content is expected to include \"malicious_code_detected\"","run_time":0.000308647,"start_time":"2025-05-01T21:35:45-06:00","resource_class":"file","resource_params":"[\"../logs/opa_interactions.log\"]","resource_id":"../logs/opa_interactions.log"}]}],"status":"loaded","status_message":""}],"statistics":{"duration":0.058141497},"version":"6.8.11"}