{"platform":{"name":"ubuntu","release":"24.04","target_id":"d2111083-60e2-528a-8a75-14e2e2460ed3"},"profiles":[{"name":"tests from controls.boundary_protection_test.rb","sha256":"23ad27263a3a7ec98beb24d6feaaabb12c96a18daf09ff1de7034188239701a8","title":"tests from controls/boundary_protection_test.rb","supports":[],"attributes":[],"groups":[{"id":"boundary_protection_test.rb","controls":["boundary-protection-policy"],"title":"Validate Boundary Protection"}],"controls":[{"id":"boundary-protection-policy","title":"Validate Boundary Protection","desc":"Verify that boundary protection mechanisms are properly implemented and enforced","descriptions":[{"label":"default","data":"Verify that boundary protection mechanisms are properly implemented and enforced"}],"impact":1.0,"refs":[],"tags":{},"code":"control 'boundary-protection-policy' do\n  impact 1.0\n  title 'Validate Boundary Protection'\n  desc 'Verify that boundary protection mechanisms are properly implemented and enforced'\n\n  # Test firewall configuration\n  describe 'Firewall configuration' do\n    it 'should have firewall enabled' do\n      response = http('http://localhost:8000/firewall_config',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      expect(json_response['enabled']).to eq(true)\n    end\n  end\n\n  # Test default deny policy\n  describe 'Default deny policy' do\n    it 'should have default deny policy configured' do\n      response = http('http://localhost:8000/firewall_config',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      expect(json_response['default_policy']).to eq('deny')\n    end\n  end\n\n  # Test for overly permissive rules\n  describe 'Firewall rules' do\n    it 'should not have overly permissive rules' do\n      response = http('http://localhost:8000/firewall_rules',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      \n      # Check for overly permissive rules\n      overly_permissive = json_response['rules'].any? do |rule|\n        rule['source'] == 'any' && \n        rule['destination'] == 'any' && \n        rule['port'] == 'any' && \n        rule['action'] == 'allow'\n      end\n      \n      expect(overly_permissive).to eq(false)\n    end\n  end\n\n  # Test network segmentation\n  describe 'Network segmentation' do\n    it 'should have proper network segmentation' do\n      response = http('http://localhost:8000/network_zones',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      \n      # Check for at least 2 zones\n      expect(json_response['zones'].length).to be >= 2\n    end\n  end\n\n  # Test zone access controls\n  describe 'Zone access controls' do\n    it 'should have access controls between zones' do\n      response = http('http://localhost:8000/zone_access_controls',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      \n      # Check that there are access controls defined\n      expect(json_response['access_controls'].length).to be > 0\n    end\n  end\n\n  # Test intrusion detection\n  describe 'Intrusion detection' do\n    it 'should have intrusion detection enabled' do\n      response = http('http://localhost:8000/intrusion_detection',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      \n      expect(json_response['enabled']).to eq(true)\n      expect(json_response['updated_within_days']).to be <= 7\n      expect(json_response['monitoring_active']).to eq(true)\n    end\n  end\n\n  # Test boundary monitoring\n  describe 'Boundary monitoring' do\n    it 'should have boundary monitoring enabled' do\n      response = http('http://localhost:8000/boundary_monitoring',\n                     method: 'GET',\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      \n      expect(json_response['enabled']).to eq(true)\n      expect(json_response['alert_on_unauthorized']).to eq(true)\n      expect(json_response['monitored_points'].length).to be > 0\n    end\n  end\n\n  # Test unauthorized access attempt\n  describe 'Unauthorized access attempt' do\n    it 'should block unauthorized access attempts' do\n      response = http('http://localhost:8000/test_boundary_access',\n                     method: 'POST',\n                     data: { source_ip: '203.0.113.1', destination: 'database' }.to_json,\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(403)\n      json_response = JSON.parse(response.body)\n      expect(json_response['allowed']).to eq(false)\n    end\n  end\n\n  # Test authorized access attempt\n  describe 'Authorized access attempt' do\n    it 'should allow authorized access attempts' do\n      response = http('http://localhost:8000/test_boundary_access',\n                     method: 'POST',\n                     data: { source_ip: '10.0.0.5', source_type: 'internal', destination: 'web' }.to_json,\n                     headers: { 'Content-Type' => 'application/json' })\n      \n      expect(response.status).to eq(200)\n      json_response = JSON.parse(response.body)\n      expect(json_response['allowed']).to eq(true)\n    end\n  end\n\n  # Check OPA interactions log for boundary protection decisions\n  describe file('./logs/opa_interactions.log') do\n    its('content') { should include 'security.boundary_protection' }\n    its('content') { should include 'allow_network_traffic' }\n    its('content') { should include 'firewall_rules_valid' }\n    its('content') { should include 'network_segmentation_valid' }\n  end\nend\n","source_location":{"line":6,"ref":"controls/boundary_protection_test.rb"},"waiver_data":{},"results":[{"status":"passed","code_desc":"Firewall configuration should have firewall enabled","run_time":0.026430548,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Firewall configuration"},{"status":"passed","code_desc":"Default deny policy should have default deny policy configured","run_time":0.004451146,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Default deny policy"},{"status":"passed","code_desc":"Firewall rules should not have overly permissive rules","run_time":0.00248881,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Firewall rules"},{"status":"passed","code_desc":"Network segmentation should have proper network segmentation","run_time":0.009641205,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Network segmentation"},{"status":"passed","code_desc":"Zone access controls should have access controls between zones","run_time":0.004158976,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Zone access controls"},{"status":"passed","code_desc":"Intrusion detection should have intrusion detection enabled","run_time":0.004503118,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Intrusion detection"},{"status":"passed","code_desc":"Boundary monitoring should have boundary monitoring enabled","run_time":0.007129409,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Boundary monitoring"},{"status":"passed","code_desc":"Unauthorized access attempt should block unauthorized access attempts","run_time":0.004213984,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Unauthorized access attempt"},{"status":"passed","code_desc":"Authorized access attempt should allow authorized access attempts","run_time":0.006719737,"start_time":"2025-05-01T21:36:10-06:00","resource_class":"Object","resource_params":"[]","resource_id":"Authorized access attempt"},{"status":"failed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"security.boundary_protection\"","run_time":0.030056032,"start_time":"2025-05-01T21:36:10-06:00","message":"expected nil to include \"security.boundary_protection\", but it does not respond to `include?`","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"failed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"allow_network_traffic\"","run_time":0.000543486,"start_time":"2025-05-01T21:36:10-06:00","message":"expected nil to include \"allow_network_traffic\", but it does not respond to `include?`","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"failed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"firewall_rules_valid\"","run_time":0.000220142,"start_time":"2025-05-01T21:36:10-06:00","message":"expected nil to include \"firewall_rules_valid\", but it does not respond to `include?`","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"},{"status":"failed","code_desc":"File ./logs/opa_interactions.log content is expected to include \"network_segmentation_valid\"","run_time":0.000242704,"start_time":"2025-05-01T21:36:10-06:00","message":"expected nil to include \"network_segmentation_valid\", but it does not respond to `include?`","resource_class":"file","resource_params":"[\"./logs/opa_interactions.log\"]","resource_id":"./logs/opa_interactions.log"}]}],"status":"loaded","status_message":""}],"statistics":{"duration":0.111063452},"version":"6.8.11"}